一、什么是HQL( SQL=Structured query language )
	HQL是Hibernate查询语言（Hibernate Query Language）
	
	Hibernate支持的查询方式：
		HQL查询
			from User(实体类)
		Criteria查询
			.gt(10).lt(20) .like .in ....
		原生SQL（Native SQL）查询
			select * from user u where uid > 10 and uid < 20
	
	HQL语句示例：
		from  cn.hibernatdemo.entity.Dept
		from  Dept
		from  Dept  where  deptName = 'SALES' 
		from  Dept  dept  where  dept.location  is not null
		from  Emp  order by  hireDate, salary desc
		select  deptNo, deptName  from  Dept
		
二、执行HQL语句
	步骤：
		获取Session对象
			Session session = HibernateSessionFactory.getCurrentSession();
		编写HQL语句
			String sql = " select * from dept ";
			String hql = " from Dept ";
		创建Query对象
			Query query = session.createQuery(hql);
		执行查询，得到查询结果
			query.list();
			query.iterate();

	示例：
		session = sessionFactory.getCurrentSession();
		String hql = "from Emp";
		Query query = session.createQuery( hql );
		List<Emp> empList = query.list();
		
		session = sessionFactory.getCurrentSession();
		String hql = "from Emp";
		Query query = session.createQuery( hql );
		Iterator<Emp> empIterator = query.iterate();
		
三、在HQL查询语句中绑定参数
	3.1.使用字符串拼接查询条件存在各种弊端："from User where name = '" + name + "'"
		性能低
		不安全
	3.2.使用占位符
		按参数位置绑定(下标从0开始)
			from User where name = ?
			示例：
				public List<Dept> findByDeptName(String deptName) {
					String hql = "from Dept as dept where dept.deptName = ?";
					Query query = currentSession().createQuery(hql);
					query.setString(0, deptName); // 为占位符赋值
					return query.list();
				}
			
		按参数名称绑定(可读性好，易维护，推荐使用)
			from User where name = :name
			示例：
				public List<Dept> findByDeptName_2(String deptName) {
					// 设置命名参数
					String hql = "from Dept as dept where dept.deptName = :name1";
					Query query = currentSession().createQuery(hql);
					// 为命名参数赋值
					query.setString("name1", deptName);
					return query.list();
				}
	3.3.为参数赋值
		setXXX()：针对具体数据类型
		setXXX( int position,  XXX value)
		setXXX( String name, XXX value)
		setParameter()：任意类型参数
		setParameter( int position,  Object value)
		setParameter( String name, Object value)
		setProperties()：专为命名参数定制
				uid uname upwd
			String hql = "from User where uid = :uid and uname = :uname and upwd = :upwd";
			.setProperties(new User())

四、查询的几种类型
	1.list
		public List<Dept> findByDeptName(String deptName) {
			String hql = "from Dept as dept where dept.deptName = ?";
			Query query = currentSession().createQuery(hql);
			query.setString(0, deptName); // 为占位符赋值
			return query.list();
		}
	2.iterate
		public List<Dept> findByDeptName_2(String deptName) {
			// 设置命名参数
			String hql = "from Dept as dept where dept.deptName = :name";
			Query query = currentSession().createQuery(hql);
			// 为命名参数赋值
			query.setString("name", deptName);
			return query.list();
		}
	3.通过占位符传参数查询
		public List<Emp> findByConditions(Object[] conditions) {
			String hql = "from Emp where job = ? and salary > ?";
			Query query = currentSession().createQuery(hql);
			if (conditions != null && conditions.length > 0) {
				for (int i = 0; i < conditions.length; ++i) {
					query.setParameter(i, conditions[i]); // 为占位符赋值
				}
			}
			return query.list();
		}
	4.通过:属性名站位查询(setProperties)
		public List<Emp> findByConditions(Emp conditions) {
			String hql = "from Emp where job = :job and salary > :salary";
			Query query = currentSession().createQuery(hql);
			query.setProperties(conditions); // 根据参数名获取相应的属性值进行赋值
			return query.list();
		}
		public List<Emp> findByConditions(String hql, EmpCondition conditions) {
			return currentSession().createQuery(hql) // 创建Query对象
					.setProperties(conditions) // 为参数赋值
					.list(); // 执行查询，获取查询结果
		}
	5.返回唯一结果:count avg sum max min mod --》》 聚合函数
		public Long obtainTheRowCount(Double sal) {
			String hql = "select count(id) from Emp where salary >= :sal";
			return (Long) currentSession().createQuery(hql)
					.setDouble("sal", sal)
					.uniqueResult(); // 执行返回唯一结果，以Object类型封装
		}

五、投影查询
	特点：
		1.HQL投影查询是查询一个持久化类的一个或多个属性值，或者是通过表达式或聚合函数得到的值
		2.投影查询需要使用HQL的select子句
		3.查询结果的封装主要分三种情况
			封装成Object对象
			封装成Object数组
			通过构造方法封装成对象
				对象不是持久化状态，仅用于封装结果

	@SuppressWarnings("unchecked")
    public List<String> findAllNames() {
        String hql = "select deptName from Dept";
        return currentSession().createQuery(hql).list();
    }
    
    @SuppressWarnings("unchecked")
    public List<Object[]> findAllDeptList() {
        String hql = "select deptNo, deptName from Dept";
        return currentSession().createQuery(hql).list();
    }

    @SuppressWarnings("unchecked")
    public List<Dept> findAllDeptList_2() {
        String hql = "select new Dept(deptNo, deptName) from Dept";
        return currentSession().createQuery(hql).list();
    }
	
六、分页查询
	1.设置获取结果的起始下标
		setFirstResult
	2.设置最大返回结果数
		setMaxResults
	3.示例：
		public List<Emp> findByPage(int pageNo, int pageSize) { //pageSize = 2 pageNo = 2
			return currentSession().createQuery("from Emp order by id")
					.setFirstResult((pageNo - 1) * pageSize) // 设置获取结果的起始下标 (2-1)*2=2
					.setMaxResults(pageSize) // 设置最大返回结果数 =2
					.list();
		}

七、总结(PPT)